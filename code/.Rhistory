##	data1Position is the column # in the dataset array containing the uniqueID, aka the "key"
##	data2Position is the column# in the dataset array containing the zipcode to be evaluated
##	data3Position is the organization involved, e.g. the “agency”
results <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric() )
results$countZip  <- 0
restults$countAgency <- 0
invalidZipcodes = data.frame()
referenceZipcodes <- referenceZipcodes[ order( referenceZipcodes[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
uniqueZipcodes <- na.omit(uniqueZipcodes)
noBlanks <- uniqueZipcodes[ uniqueZipcodes !="" & uniqueZipcodes != "N/A" & uniqueZipcodes != "na" ]
sortedZipcodes <- sort( noBlanks )
uniqueZipcodes <- data.frame( sortedZipcodes, stringsAsFactors = FALSE )
#  rowsUniqueZipcodes <- nrow( uniqueZipcodes )
invalidIndex <- !(uniqueZipcodes %in% referenceZipcodes[,1])
invalidZipcodes <- uniqueZipcodes[invalidIndex]
#  stopTime <- as.POSIXct( Sys.time() )
#  stopTimeFormatted <- format( stopTime, "%H:%M:%S" )
#  cat( "\nEnd unique zipcoad lookup in USPS:", stopTimeFormatted )
#  cat( "\n\nTime spent in the lookup of unique zipcodes in USPS: ", sprintf( "%.2f", difftime( stopTime, startTime, units = "secs")), "seconds." )
#  startTime <- as.POSIXct( Sys.time() )
#  startTimeFormatted <- format( startTime, "%H:%M:%S" )
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- nrow( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes[, 1] ) {
if (dataset[row, data2Position] %in% results$badZipCode ){
rowIndex1 <- which(results$badZipcode == dataset[row, data2Position], arr.ind = TRUE)[1,1]
results$countZip[rowIndex1,] <-  results$countZip[rowIndex1,] + 1
} else{
newRow <- data.frame ( dataset[ row, data2Position ],1)
results$badZipcode <- rbind(newRow)
}
}
}
}
return( results )
}
#########################################################################
##  Create the path to the file containing the 311 Service Request data.
data1File <- file.path( "C:", "Users", "david", "OneDrive", "Documents", "nyc311clean", "data", "test_sample4.csv")
data2File <- file.path( "C:", "Users", "david", "OneDrive", "Documents", "nyc311clean", "data", "USPS_zipcodes.csv" )
data3File <- file.path( "C:", "Users", "david", "OneDrive", "Documents", "nyc311clean", "data", "NYPDPrecincts2023.csv" )
data4File <- file.path( "C:", "Users", "david", "OneDrive", "Documents", "nyc311clean", "data", "NYCCityCouncil2023.csv" )
##  The file contains column names in the "header" line.
##  The R "read.csv" function uses a "." to replace the spaces in column names. This makes the column names
##    into legal variables, but the "." can cause problems elsewhere. The function "makeColNamesUserFriendly"
##    replaces the "." with an underscore "_". thus simplifying the field names. Example "Created.date"
##    becomes "Created_date". The function also removes any additional and trailing spaces between column names.
##
##  Additionally, the field names are converted to lower case with the "tolower" function. Thus "Create_date"
##    becomes "create_date".
##
##  These corrections are applied to the column names using the "names" data field created from the header of the file.
##  The new field names, with the "_" character and lower case replace the current field names.
##
#########################################################################
# Load the USPS zipcode file
USPSzipcodes <- read.csv( data2File, header = TRUE, colClasses = rep( "character", ncol( read.csv( data2File ) ) ) )
USPSzipcodes <- makeColNamesUserFriendly( USPSzipcodes )
USPSzipcodesOnly <- USPSzipcodes[, "delivery_zipcode", drop = FALSE]
zipRows <- nrow( USPSzipcodesOnly )
#########################################################################
precinctsNYPD <- read.csv( data3File, header = TRUE, colClasses = rep( "character", ncol( read.csv( data3File ))))
precinctsNYPD <- makeColNamesUserFriendly( precinctsNYPD )
numPrecincts <- nrow( precinctsNYPD )
#########################################################################
cityCouncilNYC <- read.csv( data4File, header = TRUE, colClasses = rep( "character", ncol( read.csv( data4File ))))
cityCouncilNYC <- makeColNamesUserFriendly( cityCouncilNYC )
numCityCouncil <- nrow( cityCouncilNYC )
#########################################################################
# Load the 311 SR data file
d311 <- read.csv( data1File, header = TRUE, colClasses = rep( "character", ncol( read.csv( data1File ))))
d311 <- makeColNamesUserFriendly( d311 )
numRows <- nrow( d311 )
cat("\nRows in the 311 SR data set:", format( numRows, big.mark = ",", scientific = FALSE),
"covering timeframe", min( d311$created_date, na.rm=TRUE ), "through", max(d311$created_date, na.rm = TRUE) )
sortedData <- as.data.frame(table(d311$agency))
sortedData <- sortedData[order(-sortedData$Freq),]
names( sortedData) <- c("Agency", "no_of_SRs")
sortedData$Percentage <- round( ( (sortedData$no_of_SRs/numRows )*100 ), 2)
sortedData$no_of_SRs <- format( sortedData$no_of_SRs, big.mark = ",", scientific = FALSE)
SRbyAgency <-sortedData
cat("\nSRs Sorted by Agency:\n")
print(SRbyAgency)
results <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric(),
stringsAsFactors = FALSE )
newRow <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric() )
dataset <- d311
data1Position <- 1
data2Position <- 9
data3Position <- 4
invalidZipcodes = data.frame()
referenceZipcodes <- USPSzipcodesOnly[ order( USPSzipcodesOnly[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
uniqueZipcodes <- na.omit(uniqueZipcodes)
noBlanks <- uniqueZipcodes[ uniqueZipcodes !="" & uniqueZipcodes != "N/A" & uniqueZipcodes != "na" ]
sortedZipcodes <- sort( noBlanks )
uniqueZipcodes <- data.frame( sortedZipcodes, stringsAsFactors = FALSE )
invalidIndex <- !(uniqueZipcodes[,1] %in% referenceZipcodes[,1])
invalidZipcodes <- uniqueZipcodes[invalidIndex,]
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- length( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
else{
cat("\nNew Row", row, " ", dataset[row, data2Position] )
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
results <- rbind(results, newRow)
}
}
}
}
}
dataset[row, data2Position] %in% invalidZipcodes
results <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric(),
stringsAsFactors = FALSE )
newRow <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric() )
dataset <- d311
data1Position <- 1
data2Position <- 42
data3Position <- 4
invalidZipcodes = data.frame()
referenceZipcodes <- USPSzipcodesOnly[ order( USPSzipcodesOnly[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
head(uniqueZipcodes)
referenceZipcodes <- USPSzipcodesOnly[ order( USPSzipcodesOnly[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
uniqueZipcodes <- na.omit(uniqueZipcodes)
noBlanks <- uniqueZipcodes[ uniqueZipcodes !="" & uniqueZipcodes != "N/A" & uniqueZipcodes != "na" ]
sortedZipcodes <- sort( noBlanks )
uniqueZipcodes <- data.frame( sortedZipcodes, stringsAsFactors = FALSE )
invalidIndex <- !(uniqueZipcodes[,1] %in% referenceZipcodes[,1])
invalidZipcodes <- uniqueZipcodes[invalidIndex,]
head(invalidZipcodes)
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- length( invalidZipcodes )
rowInvalidZipcodes
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
else{
cat("\nNew Row", row, " ", dataset[row, data2Position] )
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
results <- rbind(results, newRow)
}
}
}
}
}
rowInvalidZipcodes <- length( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
else{
cat("\nNew Row", row, " ", dataset[row, data2Position] )
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
results <- rbind(results, newRow)
}
}
}
}
}
hear(results)
head(results)
dataset[15000, data2Position] %in% invalidZipcodes
dataset[15000, data2Position]
data2Position
str(invalidZipcodes)
matchingEntries <- invalidZipcodes[invalidZipcodes== 17216, ]
matchingEntries <- invalidZipcodes[invalidZipcodes== 17216 ]
matchingEntries
dataset[row, data2Position] %in% results$badZipcode
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- length( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
#      cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
cat("\nNew Row", row, " ", dataset[row, data2Position] )
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
results <- rbind(results, newRow)
}
}
}
}
head(results)
table(results)
table(results$badZipcodes)
table(results$countZip)
sum(results$badZipcodes)
count(results$badZipcodes)
NROW(results$badZipcodes)
NROW(results$agency)
existingIndex1
existingIndex2
results <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric(),
stringsAsFactors = FALSE )
newRow <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric() )
dataset <- d311
data1Position <- 1
data2Position <- 42
data3Position <- 4
invalidZipcodes = data.frame()
referenceZipcodes <- USPSzipcodesOnly[ order( USPSzipcodesOnly[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
uniqueZipcodes <- na.omit(uniqueZipcodes)
noBlanks <- uniqueZipcodes[ uniqueZipcodes !="" & uniqueZipcodes != "N/A" & uniqueZipcodes != "na" ]
sortedZipcodes <- sort( noBlanks )
uniqueZipcodes <- data.frame( sortedZipcodes, stringsAsFactors = FALSE )
#  rowsUniqueZipcodes <- nrow( uniqueZipcodes )
invalidIndex <- !(uniqueZipcodes[,1] %in% referenceZipcodes[,1])
invalidZipcodes <- uniqueZipcodes[invalidIndex,]
#  stopTime <- as.POSIXct( Sys.time() )
#  stopTimeFormatted <- format( stopTime, "%H:%M:%S" )
#  cat( "\nEnd unique zipcoad lookup in USPS:", stopTimeFormatted )
#  cat( "\n\nTime spent in the lookup of unique zipcodes in USPS: ", sprintf( "%.2f", difftime( stopTime, startTime, units = "secs")), "seconds." )
#  startTime <- as.POSIXct( Sys.time() )
#  startTimeFormatted <- format( startTime, "%H:%M:%S" )
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- length( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
#      cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
#          cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
cat("\nNew Row", row, " ", dataset[row, data2Position] )
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
results <- rbind(results, newRow)
}
}
}
}
results <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric(),
stringsAsFactors = FALSE )
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
#      cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
#          cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
cat("\nNew Row", newrow )
results <- rbind(results, newRow)
}
}
}
}
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
#      cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
#          cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
cat("\nNew Row", newRow )
results <- rbind(results, newRow)
}
}
}
}
if ( rowInvalidZipcodes > 0 ) {
rowIndex <- 1
badZipCount <- 0
for ( row in 1:rowDataset ) {
#      cat("\nExisting Row", row, " ", dataset[row, data2Position], dataset[row, data2Position] %in% invalidZipcodes)
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
#          cat("\nExisting Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
existingIndex2 <- match(dataset[row, data3Position], results$agency)
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
newRow <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1,
agency = dataset[row, data3Position],
countAgency = 1)
("\nNew Row")
print( newRow )
results <- rbind(results, newRow)
}
}
}
}
results
results <- results[order(results$badZipcodes),]
results
resultsByZip <- data.frame( badZipcode = character(),
countZip = numeric(),
stringsAsFactors = FALSE )
resultsByAgency <- data.frame(  agency = character(),
countAgency = numeric(),
stringsAsFactors = FALSE )
newRow <- data.frame( badZipcode = character(),
countZip = numeric(),
agency = character(),
countAgency = numeric() )
dataset <- d311
data1Position <- 1
data2Position <- 42
data3Position <- 4
invalidZipcodes = data.frame()
referenceZipcodes <- USPSzipcodesOnly[ order( USPSzipcodesOnly[, 1] ), ]
referenceZipcodes <- data.frame( referenceZipcodes, stringsAsFactors = FALSE )
uniqueZipcodes <- unique(  dataset[ , data2Position ], na.rm = TRUE )
uniqueZipcodes <- na.omit(uniqueZipcodes)
noBlanks <- uniqueZipcodes[ uniqueZipcodes !="" & uniqueZipcodes != "N/A" & uniqueZipcodes != "na" ]
sortedZipcodes <- sort( noBlanks )
uniqueZipcodes <- data.frame( sortedZipcodes, stringsAsFactors = FALSE )
invalidIndex <- !(uniqueZipcodes[,1] %in% referenceZipcodes[,1])
invalidZipcodes <- uniqueZipcodes[invalidIndex,]
rowDataset <- nrow( dataset )
rowInvalidZipcodes <- length( invalidZipcodes )
if ( rowInvalidZipcodes > 0 ) {
for ( row in 1:rowDataset ) {
if ( dataset[row, data2Position] != "" && dataset[row, data2Position] %in% invalidZipcodes ) {
if (dataset[row, data2Position] %in% results$badZipcode ){
existingIndex1 <- match(dataset[row, data2Position], results$badZipcode)
cat("\nExisting Zipcode Row", row, " ", dataset[row, data2Position], existingIndex1 )
if (!is.na(existingIndex1)) {
# Increment the countZip if the badZipcode already exists in results
results$countZip[existingIndex1] <- results$countZip[existingIndex1] + 1
}
} else {
newRow1 <- data.frame ( badZipcodes =dataset[ row, data2Position ],
countZip = 1 )
cat( "\nNew Row1" )
print( newRow1 )
resultsByZip <- rbind(resultsByZip, newRow1)
}
if (dataset[row, data3Position] %in% results$agency ){
existingIndex2 <- match(dataset[row, data3Position], results$agency)
cat("\nExisting Agency Row", row, " ", dataset[row, data2Position], existingIndex2 )
if (!is.na(existingIndex2)) {
# Increment the countZip if the badZipcode already exists in results
results$countAgency[existingIndex2] <- results$countAgency[existingIndex2] + 1
}
} else {
newRow2 <- data.frame ( agency = dataset[row, data3Position],
countAgency = 1)
("\nNew Row2")
print( newRow2 )
resultsByAgency <- rbind(resultsByAgency, newRow2)
}
}
}
}
resultsByAgency
resultsByZip
source("Dev copy 311 data.R", echo = FALSE)
source("Dev copy 311 data.R", echo=FALSE)
install.packages("stringr", repos = "https://mirrors.nics.utk.edu/cran/")
install.packages("scales", repos = "https://mirrors.nics.utk.edu/cran/")
