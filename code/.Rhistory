cat("\nShrinking file size by deleting these", length(redundant_columns), "redundant fields:\n")
# Print the redundant columns vertically
index <- 1
for (column in redundant_columns) {
cat("    ", index, "-", column, "\n")
index <- index + 1
}
# Read the data into a data table object
#d311 <- fread(data1File, header = TRUE, sep = ",")
# Delete the redundant columns
d311_reduced <- d311[, !names(d311) %in% redundant_columns,]
# Calculate the size of the new data table object
reduced_size <- object.size(d311_reduced)
# Compute the difference in size
size_reduction <- original_size - reduced_size
# Print the results
cat("Original size:", format(original_size, units = "auto"), "\n")
cat("Size after removing redundant columns:", format(reduced_size, units = "auto"), "\n")
cat("Potential size reduction:", format(size_reduction, units = "auto"), "or",
round(size_reduction/original_size * 100, 1),  "%")
#########################################################################
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
units <- "hours"
duration <- duration / 3600 # Convert to hours
} else if (duration > 60) {
units <- "minutes"
duration <- duration / 60 # Convert to minutes
} else {
units <- "seconds"
}
program_end <- as.POSIXct(Sys.time())
formatted_end_time <- format(program_end, "%Y-%m-%d %H:%M:%S")
cat("\nExecution ends at:", formatted_end_time)
cat("\n\nProgram run-time: ", round(duration, 4), units, "\n")
#########################################################################
cat("\n *****END OF PROGRAM*****")
str(d311
)
colnames(d311)
cat("\nCurrent column names for d311 dataframe\n")
print(names(d311))
original_size
names(d311_reduced)
reduced_size
cat("\nCurrent column names for d311 dataframe\n")
print(names(d311))
# # List of redundant columns to remove
redundant_columns <- c(
"agency_name",
"park_borough",
"intersection_street_1",
"intersection_street_2",
"location",
"duration",
"postClosedUpdateDuration",
"translated_borough_boundaries",
)
cat("\nCurrent column names for d311 dataframe\n")
print(names(d311))
# # List of redundant columns to remove
redundant_columns <- c(
"agency_name",
"park_borough",
"intersection_street_1",
"intersection_street_2",
"location",
"duration",
"postClosedUpdateDuration",
"translated_borough_boundaries",
)
cat("\nCurrent column names for d311 dataframe\n")
print(names(d311))
# # List of redundant columns to remove
redundant_columns <- c(
"agency_name",
"park_borough",
"intersection_street_1",
"intersection_street_2",
"location",
"duration",
"postClosedUpdateDuration",
"translated_borough_boundaries"
)
cat("\nShrinking file size by deleting these", length(redundant_columns), "redundant fields:\n")
# Print the redundant columns vertically
index <- 1
for (column in redundant_columns) {
cat("    ", index, "-", column, "\n")
index <- index + 1
}
# Delete the redundant columns
d311_reduced <- d311[, !names(d311) %in% redundant_columns,]
# Calculate the size of the new data table object
reduced_size <- object.size(d311_reduced)
# Compute the difference in size
size_reduction <- original_size - reduced_size
# Print the results
cat("Original size:", format(original_size, units = "auto"), "\n")
cat("Size after removing redundant columns:", format(reduced_size, units = "auto"), "\n")
cat("Potential size reduction:", format(size_reduction, units = "auto"), "or",
round(size_reduction/original_size * 100, 1),  "%")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
cat("\nNumber and % blanks and N/A (total empty) entries per column:\n")
print(missingDataPerColumn, row.names = FALSE, right = FALSE)
# Determine the parameters for the chart
max_count <- max(missingDataPerColumn$blanks)
total_count <- sum(missingDataPerColumn$count)
result <- calculate_values(max_count)
starting_value <- as.numeric(result$starting_value)
increment <- result$increment
# Create the bar chart with vertical X-axis labels
blank_chart <- ggplot(missingDataPerColumn, aes(x = reorder(field, -total_empty), y = total_empty)) +
geom_bar(stat = "identity", fill = "#D55E00") +
theme(
axis.title.x = element_text(vjust = 0, size = 11),
axis.title.y = element_text(vjust = 1, size = 11),
plot.title = element_text(hjust = 0.5, size = 13),
plot.subtitle = element_text(size = 9),
panel.background = element_rect(fill = "gray95", color = "gray95"),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.position = "none" # Remove all legends
) +
geom_text(aes(
x = field, y = total_empty, label = pct_empty,
angle = -70
)) +
geom_hline(
yintercept = seq(starting_value, max_count, by = increment),
linetype = "dotted", color = "gray40"
) +
ggtitle("Number and % of blank/missing fields per column",
subtitle = paste(chart_sub_title, format(num_rows_d311, big.mark = ","), sep = "")
) +
labs(y = NULL, x = NULL)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
# Create the bar chart with vertical X-axis labels
blank_chart <- ggplot(missingDataPerColumn, aes(x = reorder(field, -total_empty), y = total_empty)) +
geom_bar(stat = "identity", fill = "#D55E00") +
theme(
axis.title.x = element_text(vjust = 0, size = 11),
axis.title.y = element_text(vjust = 1, size = 11),
plot.title = element_text(hjust = 0.5, size = 13),
plot.subtitle = element_text(size = 9),
panel.background = element_rect(fill = "gray95", color = "gray95"),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.position = "none" # Remove all legends
) +
geom_text(aes(
x = field, y = total_empty, label = pct_empty,
angle = -70
)) +
geom_hline(
yintercept = seq(starting_value, max_count, by = increment),
linetype = "dotted", color = "gray40"
) +
ggtitle("Number and % of blank/missing fields per column",
subtitle = paste(chart_sub_title, format(num_rows_d311, big.mark = ","), sep = "")
) +
labs(y = NULL, x = NULL)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
# Create the bar chart with vertical X-axis labels
blank_chart <- ggplot(missingDataPerColumn, aes(x = reorder(field, -total_empty), y = total_empty)) +
geom_bar(stat = "identity", fill = "#D55E00") +
theme(
axis.title.x = element_text(vjust = 0, size = 11),
axis.title.y = element_text(vjust = 1, size = 11),
plot.title = element_text(hjust = 0.5, size = 13),
plot.subtitle = element_text(size = 9),
panel.background = element_rect(fill = "gray95", color = "gray95"),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.position = "none" # Remove all legends
) +
geom_text(aes(
x = field, y = total_empty, label = pct_empty,
angle = -70
), size = 3) +
geom_hline(
yintercept = seq(starting_value, max_count, by = increment),
linetype = "dotted", color = "gray40"
) +
ggtitle("Number and % of blank/missing fields per column",
subtitle = paste(chart_sub_title, format(num_rows_d311, big.mark = ","), sep = "")
) +
labs(y = NULL, x = NULL)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
# Create the bar chart with vertical X-axis labels
blank_chart <- ggplot(missingDataPerColumn, aes(x = reorder(field, -total_empty), y = total_empty)) +
geom_bar(stat = "identity", fill = "#D55E00") +
theme(
axis.title.x = element_text(vjust = 0, size = 11),
axis.title.y = element_text(vjust = 1, size = 11),
plot.title = element_text(hjust = 0.5, size = 13),
plot.subtitle = element_text(size = 9),
panel.background = element_rect(fill = "gray95", color = "gray95"),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.position = "none" # Remove all legends
) +
geom_text(aes(
x = field, y = total_empty, label = pct_empty,
angle = -70
), size = 3.5) +
geom_hline(
yintercept = seq(starting_value, max_count, by = increment),
linetype = "dotted", color = "gray40"
) +
ggtitle("Number and % of blank/missing fields per column",
subtitle = paste(chart_sub_title, format(num_rows_d311, big.mark = ","), sep = "")
) +
labs(y = NULL, x = NULL)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
blank_chart <- ggplot(missingDataPerColumn, aes(x = reorder(field, -total_empty), y = total_empty)) +
geom_bar(stat = "identity", fill = "#D55E00") +
theme(
axis.title.x = element_text(vjust = 0, size = 11),
axis.title.y = element_text(vjust = 1, size = 11),
plot.title = element_text(hjust = 0.5, size = 13),
plot.subtitle = element_text(size = 9),
panel.background = element_rect(fill = "gray95", color = "gray95"),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "bold"),
axis.text.y = element_text(face = "bold"),
legend.position = "none" # Remove all legends
) +
geom_text(aes(
x = field, y = total_empty, label = pct_empty,
angle = -70
), size = 4) +
geom_hline(
yintercept = seq(starting_value, max_count, by = increment),
linetype = "dotted", color = "gray40"
) +
ggtitle("Number and % of blank/missing fields per column",
subtitle = paste(chart_sub_title, format(num_rows_d311, big.mark = ","), sep = "")
) +
labs(y = NULL, x = NULL)
# Print the bar chart
print(blank_chart)
chart_path <- file.path(chart_directory_path, "BlankFields.pdf")
ggsave(chart_path, plot = blank_chart, width = 10, height = 8)
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
chart_prefix
file_name_prefix
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
programStart <- as.POSIXct(Sys.time())
formattedStartTime <- format(programStart, "%Y-%m-%d %H:%M:%S")
cat("\nExecution begins at:", formattedStartTime)
cat("\n***** Program initialization *****")
setwd("C:/Users/david/OneDrive/Documents/datacleaningproject/nyc311clean/code")
cat("\nExecution begins at:", formattedStartTime)
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
sink()
########################################################################
# Identify SRs created at midnight and noon
# Extract hour, minute, and second components of closed_date for valid rows
hour <- as.numeric(format(d311$created_date, "%H"))
minute <- as.numeric(format(d311$created_date, "%M"))
second <- as.numeric(format(d311$created_date, "%S"))
# Identify rows with time exactly at midnight (00:00:00)
midnight_created_rows <- hour == 0 & minute == 0 & second == 0
noon_created_rows <- hour == 12 & minute == 0 & second == 0
# Count the number of rows with time exactly at midnight
midnight_created_count <- sum(midnight_created_rows)
noon_created_count <- sum(noon_created_rows)
midnight_created_data <- d311[midnight_created_rows, ]
created_at_midnight <- midnight_created_data[, c("created_date", "agency")]
noon_created_data <- d311[noon_created_rows, ]
created_at_noon <- noon_created_data[, c("created_date", "agency")]
if (midnight_created_count > 0) {
cat(
"\n\nThere are",
format(midnight_created_count, big.mark = ","),
"SRs that were 'created' at exactly midnight.\n"
)
sorted_create_at_midnight <- rank_by_agency(created_at_midnight)
chart_title <- "SRs created exactly at midnight by Agency & cumulative percentage"
chart_file_name <- "created_at_midnight_chart.pdf"
create_combo_chart(
created_at_midnight,
chart_title,
chart_file_name
)
} else {
cat("\n\nThere are no SRs with a 'created_date' exactly at midnight.\n")
}
if (noon_created_count > 0) {
cat(
"\n\nThere",
format(noon_created_count, big.mark = ","),
"SRs that were 'created' exactly at noon."
)
sorted_create_at_noon <- rank_by_agency(created_at_noon)
chart_title <- "SRs created exactly at noon by Agency & cumulative percentage"
chart_file_name <- "created_at_noon_chart.pdf"
if (!is.null(sorted_create_at_noon)) {
create_combo_chart(
created_at_noon,
chart_title,
chart_file_name
)
} else {
cat("\n\nThere are no SRs with a 'created_date' exactly at noon.\n")
}
}
# Identify SRs closed at midnight and noon
# Remove N/A closed_date(s)
valid_closed_date <- !is.na(d311$closed_date)
valid_closed_data <- d311[valid_closed_date, ]
# Extract hour, minute, and second components of closed_date for valid rows
hour <- as.numeric(format(d311$closed_date[valid_closed_date], "%H"))
minute <- as.numeric(format(d311$closed_date[valid_closed_date], "%M"))
second <- as.numeric(format(d311$closed_date[valid_closed_date], "%S"))
# Identify rows with time exactly at midnight (00:00:00)
midnight_closed_rows <- hour == 0 & minute == 0 & second == 0
noon_closed_rows <- hour == 12 & minute == 0 & second == 0
# Count the number of rows with time exactly at midnight
midnight_closed_count <- sum(midnight_closed_rows)
noon_closed_count <- sum(noon_closed_rows)
midnight_closed_data <- valid_closed_data[midnight_closed_rows, ]
closed_at_midnight <- midnight_closed_data[, c("created_date", "agency")]
noon_closed_data <- valid_closed_data[noon_closed_rows, ]
closed_at_noon <- noon_closed_data[, c("created_date", "agency")]
if (midnight_closed_count > 0) {
cat(
"\n\nThere are",
format(midnight_closed_count, big.mark = ","),
"SRs that were 'closed' exactly at midnight."
)
sorted_closed_at_midnight <- rank_by_agency(closed_at_midnight)
chart_title <- "SRs closed exactly at midnight by Agency & cumulative percentage"
chart_file_name <- "closed_at_midnight_chart.pdf"
if (!is.null(sorted_closed_at_midnight)) {
create_combo_chart(
closed_at_midnight,
chart_title,
chart_file_name
)
} else {
cat("\n\nThere are no SRs with a 'closed_date' exactly at midnight.\n")
}
}
if (noon_closed_count > 0) {
cat(
"\n\nThere are",
format(noon_closed_count, big.mark = ","),
"SRs that were 'closed' exactly at noon."
)
sorted_closed_at_noon <- rank_by_agency(closed_at_noon)
chart_title <- "SRs closed exactly at noon by Agency & cumulative percentage"
chart_file_name <- "closed_at_noon_chart.pdf"
if (!is.null(sorted_closed_at_noon)) {
create_combo_chart(
closed_at_noon,
chart_title,
chart_file_name
)
} else {
cat("\n\nThere are no SRs with a 'closed_date' exactly at noon.\n")
}
}
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
programStart
programStop
duration
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
#########################################################################
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
cat("\n *****END OF PROGRAM*****")
#########################################################################
sink()
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
cat("\n *****END OF PROGRAM*****")
#########################################################################
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
cat("\n *****END OF PROGRAM*****")
#########################################################################
sink()
programStop <- as.POSIXct(Sys.time())
duration <- difftime(programStop, programStart, units = "secs")
if (duration > 3600) {
duration <- duration / 3600 # Convert to hours
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "hours\n")
} else if (duration > 60) {
duration <- duration / 60 # Convert to minutes
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "minutes\n")
} else {
cat("\n\nProgram run-time: ", sprintf("%.2f", duration), "seconds\n")
}
cat("\n *****END OF PROGRAM*****")
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/datacleansing.R")
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
source("~/Documents/datacleaningproject/nyc311clean/code/timelinecharts..R")
